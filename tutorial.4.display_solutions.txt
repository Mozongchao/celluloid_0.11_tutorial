0        1         2         3         4         5         6         7         8
12345678901234567890123456789012345678901234567890123456789012345678901234567890

###############################################################################
## if the user has saved the rda files, they can be loaded:
## files<-system("ls Rda/*rda", intern=T); for( f in files){load(f)}
###############################################################################

Plotting the solution in sol1 (ONE CLONE):

If cn does not already exist, set it using the parameters used in the search:

prepCN(12) 

Given parameters S and t (with sum(t)=1) and copy number configurations cn, the 
expected peak locations can be obtained with a call to 

ePP <- ePeakPos( S=0.6347076 , t=c(0.03951727, 0.96048273), cn=cn  )

or, alternatively, using the list returned by coverParamSpace:

ePP <- ePeakPos( par=sol1[[1]]$par  , cn=cn  )

 head(ePP)

  m0 p0 m1 p1          x         ar
1  1  1  0  0 0.02508191 0.50000000
2  1  1  0  1 0.32989476 0.03801502
3  1  1  1  0 0.32989476 0.96198498
4  1  1  0  2 0.63470760 0.01975864
5  1  1  1  1 0.63470760 0.50000000
6  1  1  2  0 0.63470760 0.98024136


Here the copy number configurations in cn is broken down into (say) maternal and
paternal copy numbers (the terms maternal and paternal are used only to 
distinguish the two chromosomes; the actual parental origin can not
be derived). m0 and p0 are used for normal cells, m1 and p1 are used for the 
tumour cells. 

To display the expected peak locations (the (x,ar) points from ePP) onto a 
contour graph, the user should call:

showTumourProfile(copyAr, maxPoints=50000 , flatten=.25 , nlev=20, 
      xlim=c(0,2) , nx=200, ny=50  )

prepCN(12) # if cn does not exist 

plotModelPeaks( S=0.6347076 , t=c(0.03951727, 0.96048273),
                cn=cn, epcol="red",epcex=1,eplwd=3 )

or 

plotModelPeaks( par=sol1[[1]]$par, 
                cn=cn, epcol="red",epcex=1,eplwd=3 )

See FigureN3.png.

The ePP data.frame above is also returned by plotModelPeaks when assigned (invisible otherwise), as in: 

ePP<-plotModelPeaks( par=sol1[[1]]$par, 
                    cn=cn, epcol="red",epcex=1,eplwd=3 )

The function plots the (x,ar) points in ePP, and labels the x-axis to represent 
integer copy number values in the tumor cells. The function is described in more 
details below.

Each red dot can either be manually labelled by calling 

addLabels( ePP, manual=T)

in which case the user need to left-click an expected peak (the red points in
FigureN3.png) to add a label and right-click the window to exit the function.
Alternatively if all peaks need to be labelled:

addLabels( ePP, selectedPoints=ePP[, c("x","ar")] ) 

Each label added to the plot indicate the values of m1/p1 corresponding to each point; for instance, a 21 label indicates that a segments located at this
particular peak have 1 maternal and 2 paternal (say) copies (we use maternal 
or paternal solely to distinguish the two chromosomes; the parental origin can 
not be inferred. A 12 label has the same interpretation as a 21 label.)


###############################################################################

Plotting the solution in sol2 (TWO SUBCLONES):

If cn does not already exist, set it using the parameters used in the search:

prepCN(6,2,1) 

Given parameters S and t (with sum(t)=1) and copy number configurations cn, the 
expected peak locations can be obtained with a call to 

ePP <- ePeakPos( par=sol2[[1]]$par, cn=cn  )

head(ePP)

  m0 p0 m1 p1 m2 p2          x         ar
1  1  1  0  0  0  0 0.02509331 0.50000000
2  1  1  0  1  0  0 0.20651647 0.06075378
3  1  1  1  0  0  0 0.20651647 0.93924622
4  1  1  0  0  0  1 0.14847350 0.08450434
5  1  1  0  0  1  0 0.14847350 0.91549566
6  1  1  0  1  0  1 0.32989666 0.03803208


Here m0 and p0 are used for normal cells, m1 and p1 are used for the 
first subclone, m2 and p2 for the second subclone, etc.

The solution in sol2 can be displayed using:

showTumourProfile(copyAr, maxPoints=50000 , flatten=.25 , nlev=20, 
        xlim=c(0,2) , nx=200, ny=50  )

prepCN( 6,2,1) 

plotModelPeaks( par=sol2[[1]]$par , 
                cn=cn, epcol="red",epcex=1,eplwd=3 , 
                preserveMatPatDiff=T , preserveMaxSubClDiff=T )

See FigureN4.png.

The function plotModelPeaks calls the function ePeakPos, as described above.
In addition to plotting the $x and $ar values of ePP as points (with control 
parameters epcol, epcex, eplwd), axis are labeled according to the copy numbers 
found in subclones. For example, a label on the x-axis taking the value 3.2 
indicates that segments found at that x-location have 3 copies in the first 
subclone and 2 in the second.  We can add labels manually using

addLabels( ePP, manual=T)

(see FigureN4.png). 

The labels further indicate the number of parental chromosomes in each 
subclone, as in 12/11, which indicates that segments contributing to this
particular peak have 1 maternal and 2 paternal (say) copies in the first 
subclone and 1 maternal, 1 paternal copy in the second subclone (we use maternal 
or paternal solely to distinguish the two chromosomes; the parental origin can 
not be inferred). 

The user can always illustrate more peaks than enumarated in the cn that 
entered the analysis, simply by calling a different prepCN. E.g.


showTumourProfile(copyAr, maxPoints=50000 , flatten=.25 , nlev=20, 
        xlim=c(0,2) , nx=200, ny=50  )

prepCN( 6,2, 0.5) 

plotModelPeaks( par=sol2[[1]]$par , 
                cn=cn, epcol="red",epcex=1,eplwd=3 , 
                preserveMatPatDiff=F  , preserveMaxSubClDiff= F )

The user can appreciate the sheer number of peaks, each corresponding to a 
potential segment that has the right number of maternal/paternal copies in 
the different subclones.  The user can refer to ?prepAR and 

 tutorial.1.background_and_methods.txt

as well as help(prepAR) for additional details on the preserveMatPatDiff and
preserveMaxSubClDiff arguments.  These two arguments can also be passed to
coverParamSpace, to allow all these additional peaks at the price of increased
complexity. 

###############################################################################

To plot copy-number-segment graphs, the read counts first need to be re-scaled.
The ePP data.frame displays both integer copy-number counts (the m and p 
columns) and the corresponding expected values for the read count.  ePP is used
to re-scale read counts: 
 

prepCN(12) 
ePP <- ePeakPos( par=sol1[[1]]$par  , cn=cn  )
tcs<- scaleReadCounts( tc , ePP )

A column named icopy was added.

Then the data can be re-segmented or the earlier segments re-scaled directly. 

segments<-scaleSegments(t.ar.seg ,  ePP )

A column named imean was added. 

Just like the addLabels adds labels to selected peaks, annotations can be added
to individual segments using the function:

segments<-annotateSegments(segments, ePP)

In which case the segment's mean and p values are annotated to the closest point
in ePP.  These labels are added in a column named labels. 

Then segments can be plotted:

# type "cairo" passed to png, to allow for transparency. May not be available.
# width and height are here expressed in pixels (the default of png)

plotSegment( tcs,segments, ar , file="segments_page%1d",device="png",
             width=960,height=1320, cex.axis=2, cex.main=2, cex.lab=2, 
             type="cairo" , tlwd=8 , chr=c("chr9","chr12","chr17","chr18")  ) 

# XY chromosomes can't be annotated due to lack of ar values
segmentsXY<-scaleSegments(t.seg ,  ePP )
plotSegment( tcs,segmentsXY, ar=NULL , file="segments_pageXY",device="png",
             width=960,height=1320, cex.axis=2, cex.main=2, cex.lab=2, 
             type="cairo" , chr=c("chrX","chrY") , tlwd=8) 


###############################################################################
